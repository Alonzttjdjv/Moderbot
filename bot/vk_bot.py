import asyncio
import logging
from typing import Optional, Dict, Any
import vk_api
from vk_api.bot_longpoll import VkBotLongPoll, VkBotEventType
from sqlalchemy.orm import Session
from database.models import Bot as BotModel, BotConfig

logger = logging.getLogger(__name__)

class VKBot:
    """VK –±–æ—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, bot_model: BotModel, db_session: Session):
        self.bot_model = bot_model
        self.db_session = db_session
        self.vk_session = vk_api.VkApi(token=bot_model.token)
        self.vk = self.vk_session.get_api()
        self.longpoll = VkBotLongPoll(self.vk_session, bot_model.group_id)
        self.is_running = False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
        self._register_commands()
    
    def _register_commands(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥"""
        self.commands = {
            'start': self._start_command,
            'help': self._help_command,
            'settings': self._settings_command,
            'ping': self._ping_command
        }
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ VK –±–æ—Ç–∞ {self.bot_model.name}")
            self.is_running = True
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª
            await self._main_loop()
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ VK –±–æ—Ç–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            self.is_running = False
            logger.info(f"VK –±–æ—Ç {self.bot_model.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ VK –±–æ—Ç–∞: {e}")
    
    async def _main_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏–π"""
        while self.is_running:
            try:
                for event in self.longpoll.listen():
                    if not self.is_running:
                        break
                    
                    await self._handle_event(event)
                    
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ VK –±–æ—Ç–∞: {e}")
                await asyncio.sleep(5)  # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
    
    async def _handle_event(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–±—ã—Ç–∏—è VK"""
        try:
            if event.type == VkBotEventType.MESSAGE_NEW:
                await self._handle_message(event.object.message)
            elif event.type == VkBotEventType.GROUP_JOIN:
                await self._handle_group_join(event.object)
            elif event.type == VkBotEventType.GROUP_LEAVE:
                await self._handle_group_leave(event.object)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–±—ã—Ç–∏—è VK: {e}")
    
    async def _handle_message(self, message):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
            if message.get('from_id') < 0:
                return
            
            user_id = message.get('from_id')
            peer_id = message.get('peer_id')
            text = message.get('text', '').strip()
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞
            chat_id = str(peer_id)
            config = self._get_chat_config(chat_id)
            
            if not config:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                self._ensure_chat_config(chat_id, "VK Chat")
                config = self._get_chat_config(chat_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–º–∞–Ω–¥—ã
            if text.startswith('/'):
                await self._handle_command(text, peer_id, config)
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
            if config and config.responses:
                response = self._check_auto_response(text, config.responses)
                if response:
                    await self._send_message(peer_id, response)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if config and config.filters and self._should_filter_message(text, config.filters):
                # –í VK API –Ω–µ—Ç –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–∞–µ–º
                await self._send_message(peer_id, "–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–º.")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_message_count(chat_id)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è VK: {e}")
    
    async def _handle_command(self, text: str, peer_id: int, config):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥"""
        try:
            command_parts = text[1:].split()
            command = command_parts[0].lower()
            args = command_parts[1:] if len(command_parts) > 1 else []
            
            if command in self.commands:
                await self.commands[command](peer_id, args, config)
            else:
                await self._send_message(peer_id, f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: /{command}")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã VK: {e}")
    
    async def _start_command(self, peer_id: int, args: list, config):
        """–ö–æ–º–∞–Ω–¥–∞ /start"""
        if config and config.welcome_message:
            welcome_msg = config.welcome_message
        else:
            welcome_msg = f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç {self.bot_model.name}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
        
        await self._send_message(peer_id, welcome_msg)
    
    async def _help_command(self, peer_id: int, args: list, config):
        """–ö–æ–º–∞–Ω–¥–∞ /help"""
        help_text = "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        help_text += "/start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        help_text += "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
        help_text += "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
        help_text += "/ping - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∑–∞–¥–µ—Ä–∂–∫—É\n"
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if config and config.commands:
            for cmd, desc in config.commands.items():
                help_text += f"/{cmd} - {desc}\n"
        
        await self._send_message(peer_id, help_text)
    
    async def _settings_command(self, peer_id: int, args: list, config):
        """–ö–æ–º–∞–Ω–¥–∞ /settings"""
        if not config:
            await self._send_message(peer_id, "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ —á–∞—Ç–∞.")
            return
        
        settings_text = f"–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –¥–ª—è —á–∞—Ç–∞:\n\n"
        settings_text += f"–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {config.welcome_message or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
        settings_text += f"–¢–∏–ø —á–∞—Ç–∞: {config.chat_type or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
        settings_text += f"–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ: {config.message_count}\n"
        
        await self._send_message(peer_id, settings_text)
    
    async def _ping_command(self, peer_id: int, args: list, config):
        """–ö–æ–º–∞–Ω–¥–∞ /ping"""
        await self._send_message(peer_id, "üèì Pong! –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!")
    
    async def _handle_group_join(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ"""
        try:
            user_id = event.get('user_id')
            if user_id:
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                welcome_msg = f"–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –≥—Ä—É–ø–ø—É! –Ø –±–æ—Ç {self.bot_model.name}."
                await self._send_message(user_id, welcome_msg)
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –∫ –≥—Ä—É–ø–ø–µ: {e}")
    
    async def _handle_group_leave(self, event):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã"""
        try:
            user_id = event.get('user_id')
            if user_id:
                logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–∫–∏–Ω—É–ª –≥—Ä—É–ø–ø—É")
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—ã—Ö–æ–¥–∞ –∏–∑ –≥—Ä—É–ø–ø—ã: {e}")
    
    async def _send_message(self, peer_id: int, text: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            self.vk.messages.send(
                peer_id=peer_id,
                message=text,
                random_id=0
            )
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è VK: {e}")
    
    def _get_chat_config(self, chat_id: str) -> Optional[BotConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞"""
        return self.db_session.query(BotConfig).filter(
            BotConfig.bot_id == self.bot_model.id,
            BotConfig.chat_id == chat_id
        ).first()
    
    def _ensure_chat_config(self, chat_id: str, chat_name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —á–∞—Ç–∞ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        config = self._get_chat_config(chat_id)
        if not config:
            config = BotConfig(
                bot_id=self.bot_model.id,
                user_id=self.bot_model.user_id,
                chat_id=chat_id,
                chat_name=chat_name,
                chat_type="group"
            )
            self.db_session.add(config)
            self.db_session.commit()
    
    def _check_auto_response(self, message: str, responses: Dict[str, str]) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤"""
        message_lower = message.lower()
        for trigger, response in responses.items():
            if trigger.lower() in message_lower:
                return response
        return None
    
    def _should_filter_message(self, message: str, filters: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if "blocked_words" in filters:
            blocked_words = filters["blocked_words"]
            message_lower = message.lower()
            for word in blocked_words:
                if word.lower() in message_lower:
                    return True
        return False
    
    def _update_message_count(self, chat_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            config = self._get_chat_config(chat_id)
            if config:
                config.message_count += 1
                self.db_session.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def update_config(self, chat_id: str, config_data: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        try:
            config = self._get_chat_config(chat_id)
            if not config:
                return False
            
            for key, value in config_data.items():
                if hasattr(config, key):
                    setattr(config, key, value)
            
            self.db_session.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.db_session.rollback()
            return False
    
    async def send_message_to_all(self, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —á–∞—Ç–æ–≤ –±–æ—Ç–∞
            configs = self.db_session.query(BotConfig).filter(
                BotConfig.bot_id == self.bot_model.id
            ).all()
            
            for config in configs:
                try:
                    chat_id = int(config.chat_id)
                    await self._send_message(chat_id, message)
                    await asyncio.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –æ—Ç–ø—Ä–∞–≤–∫–∞–º–∏
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —á–∞—Ç {config.chat_id}: {e}")
                    
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –º–∞—Å—Å–æ–≤–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def get_group_info(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ"""
        try:
            group_info = self.vk.groups.getById()
            return group_info[0] if group_info else None
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –≥—Ä—É–ø–ø–µ: {e}")
            return None
    
    def get_group_members_count(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ –≥—Ä—É–ø–ø—ã"""
        try:
            members_count = self.vk.groups.getMembers(group_id=self.bot_model.group_id)
            return members_count.get('count', 0)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {e}")
            return 0