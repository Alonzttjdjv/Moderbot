import asyncio
import logging
from typing import Optional, Dict, Any
import discord
from discord.ext import commands
from sqlalchemy.orm import Session
from database.models import Bot as BotModel, BotConfig

logger = logging.getLogger(__name__)

class DiscordBot:
    """Discord –±–æ—Ç —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –∫–∞—Å—Ç–æ–º–∏–∑–∞—Ü–∏–∏"""
    
    def __init__(self, bot_model: BotModel, db_session: Session):
        self.bot_model = bot_model
        self.db_session = db_session
        self.bot = commands.Bot(
            command_prefix='!',
            intents=discord.Intents.default(),
            help_command=None
        )
        self.is_running = False
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π
        self._register_events()
        self._register_commands()
    
    def _register_events(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ —Å–æ–±—ã—Ç–∏–π"""
        
        @self.bot.event
        async def on_ready():
            """–°–æ–±—ã—Ç–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞"""
            logger.info(f"Discord –±–æ—Ç {self.bot_model.name} –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ")
            logger.info(f"–ü–æ–¥–∫–ª—é—á–µ–Ω –∫ {len(self.bot.guilds)} —Å–µ—Ä–≤–µ—Ä–∞–º")
            self.is_running = True
        
        @self.bot.event
        async def on_message(message):
            """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
            if message.author.bot:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –¥–ª—è —ç—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞/–∫–∞–Ω–∞–ª–∞
            guild_id = str(message.guild.id) if message.guild else "DM"
            channel_id = str(message.channel.id)
            
            config = self._get_chat_config(guild_id, channel_id)
            if not config:
                # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
                self._ensure_chat_config(guild_id, channel_id, message.guild.name if message.guild else "DM")
                config = self._get_chat_config(guild_id, channel_id)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç—ã
            if config and config.responses:
                response = self._check_auto_response(message.content, config.responses)
                if response:
                    await message.channel.send(response)
                    return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
            if config and config.filters and self._should_filter_message(message.content, config.filters):
                await message.delete()
                await message.channel.send("–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–æ —Ñ–∏–ª—å—Ç—Ä–æ–º.")
                return
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
            self._update_message_count(guild_id, channel_id)
            
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
            await self.bot.process_commands(message)
    
    def _register_commands(self):
        """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∫–æ–º–∞–Ω–¥"""
        
        @self.bot.command(name='start')
        async def start_command(ctx):
            """–ö–æ–º–∞–Ω–¥–∞ /start"""
            guild_id = str(ctx.guild.id) if ctx.guild else "DM"
            channel_id = str(ctx.channel.id)
            
            config = self._get_chat_config(guild_id, channel_id)
            
            if config and config.welcome_message:
                welcome_msg = config.welcome_message
            else:
                welcome_msg = f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç {self.bot_model.name}. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ !help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø—Ä–∞–≤–∫–∏."
            
            await ctx.send(welcome_msg)
        
        @self.bot.command(name='help')
        async def help_command(ctx):
            """–ö–æ–º–∞–Ω–¥–∞ /help"""
            guild_id = str(ctx.guild.id) if ctx.guild else "DM"
            channel_id = str(ctx.channel.id)
            
            config = self._get_chat_config(guild_id, channel_id)
            
            help_text = "**–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
            help_text += "‚Ä¢ `!start` - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
            help_text += "‚Ä¢ `!help` - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
            help_text += "‚Ä¢ `!settings` - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞\n"
            
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã
            if config and config.commands:
                for cmd, desc in config.commands.items():
                    help_text += f"‚Ä¢ `!{cmd}` - {desc}\n"
            
            await ctx.send(help_text)
        
        @self.bot.command(name='settings')
        async def settings_command(ctx):
            """–ö–æ–º–∞–Ω–¥–∞ /settings"""
            guild_id = str(ctx.guild.id) if ctx.guild else "DM"
            channel_id = str(ctx.channel.id)
            
            config = self._get_chat_config(guild_id, channel_id)
            
            if not config:
                await ctx.send("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–ª—è —ç—Ç–æ–≥–æ –∫–∞–Ω–∞–ª–∞.")
                return
            
            settings_text = f"**–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞ –¥–ª—è –∫–∞–Ω–∞–ª–∞:**\n\n"
            settings_text += f"**–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:** {config.welcome_message or '–ù–µ –∑–∞–¥–∞–Ω–æ'}\n"
            settings_text += f"**–¢–∏–ø —á–∞—Ç–∞:** {config.chat_type or '–ù–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω'}\n"
            settings_text += f"**–°–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ:** {config.message_count}\n"
            
            await ctx.send(settings_text)
        
        @self.bot.command(name='ping')
        async def ping_command(ctx):
            """–ö–æ–º–∞–Ω–¥–∞ /ping –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–¥–µ—Ä–∂–∫–∏"""
            latency = round(self.bot.latency * 1000)
            await ctx.send(f"üèì Pong! –ó–∞–¥–µ—Ä–∂–∫–∞: {latency}ms")
    
    async def start(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        try:
            logger.info(f"–ó–∞–ø—É—Å–∫ Discord –±–æ—Ç–∞ {self.bot_model.name}")
            await self.bot.start(self.bot_model.token)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ Discord –±–æ—Ç–∞: {e}")
            raise
    
    async def stop(self):
        """–û—Å—Ç–∞–Ω–æ–≤–∫–∞ –±–æ—Ç–∞"""
        try:
            if self.bot.is_ready():
                await self.bot.close()
            self.is_running = False
            logger.info(f"Discord –±–æ—Ç {self.bot_model.name} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ Discord –±–æ—Ç–∞: {e}")
    
    def _get_chat_config(self, guild_id: str, channel_id: str) -> Optional[BotConfig]:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–ª—è —Å–µ—Ä–≤–µ—Ä–∞/–∫–∞–Ω–∞–ª–∞"""
        return self.db_session.query(BotConfig).filter(
            BotConfig.bot_id == self.bot_model.id,
            BotConfig.chat_id == f"{guild_id}:{channel_id}"
        ).first()
    
    def _ensure_chat_config(self, guild_id: str, channel_id: str, chat_name: str):
        """–°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç"""
        chat_id = f"{guild_id}:{channel_id}"
        config = self._get_chat_config(guild_id, channel_id)
        
        if not config:
            config = BotConfig(
                bot_id=self.bot_model.id,
                user_id=self.bot_model.user_id,
                chat_id=chat_id,
                chat_name=chat_name,
                chat_type="guild" if guild_id != "DM" else "private"
            )
            self.db_session.add(config)
            self.db_session.commit()
    
    def _check_auto_response(self, message: str, responses: Dict[str, str]) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–≤—Ç–æ–æ—Ç–≤–µ—Ç–æ–≤"""
        message_lower = message.lower()
        for trigger, response in responses.items():
            if trigger.lower() in message_lower:
                return response
        return None
    
    def _should_filter_message(self, message: str, filters: Dict[str, Any]) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        if "blocked_words" in filters:
            blocked_words = filters["blocked_words"]
            message_lower = message.lower()
            for word in blocked_words:
                if word.lower() in message_lower:
                    return True
        return False
    
    def _update_message_count(self, guild_id: str, channel_id: str):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        try:
            config = self._get_chat_config(guild_id, channel_id)
            if config:
                config.message_count += 1
                self.db_session.commit()
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—á–µ—Ç—á–∏–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π: {e}")
    
    def update_config(self, guild_id: str, channel_id: str, config_data: Dict[str, Any]) -> bool:
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –±–æ—Ç–∞"""
        try:
            config = self._get_chat_config(guild_id, channel_id)
            if not config:
                return False
            
            for key, value in config_data.items():
                if hasattr(config, key):
                    setattr(config, key, value)
            
            self.db_session.commit()
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
            self.db_session.rollback()
            return False
    
    async def send_message(self, guild_id: str, channel_id: str, message: str):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∫–∞–Ω–∞–ª"""
        try:
            if not self.bot.is_ready():
                return False
            
            guild = self.bot.get_guild(int(guild_id))
            if not guild:
                return False
            
            channel = guild.get_channel(int(channel_id))
            if not channel:
                return False
            
            await channel.send(message)
            return True
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            return False