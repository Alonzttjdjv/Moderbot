import asyncio
import logging
import os
from datetime import datetime, timedelta
from typing import Dict, List, Optional

from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import Message, ChatMember, User, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.exceptions import TelegramAPIError

from config import (
    BOT_TOKEN, ADMIN_IDS, DATABASE_PATH, LOG_LEVEL, 
    MAX_WARNINGS, AUTO_DELETE_SPAM, SPAM_THRESHOLD
)
from database import DatabaseManager
from moderator import ChatModerator
from filters import filter_manager
from utils import (
    format_time, format_duration, get_user_mention, 
    parse_duration, escape_markdown, get_time_ago
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=getattr(logging, LOG_LEVEL),
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log', encoding='utf-8'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=BOT_TOKEN)
storage = MemoryStorage()
dp = Dispatcher(storage=storage)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = DatabaseManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
moderator = ChatModerator(bot)

# –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM
class ModerationStates(StatesGroup):
    waiting_for_filter_pattern = State()
    waiting_for_filter_action = State()
    waiting_for_ban_duration = State()
    waiting_for_mute_duration = State()
    waiting_for_warning_reason = State()

# –ö–æ–º–∞–Ω–¥—ã –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤
@dp.message(CommandStart())
async def cmd_start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        user = message.from_user
        db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –ï—Å–ª–∏ —ç—Ç–æ –ª–∏—á–Ω—ã–π —á–∞—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        if message.chat.type == "private":
            await message.answer(
                "ü§ñ **–ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä —á–∞—Ç–æ–≤**\n\n"
                "–Ø –ø–æ–º–æ–≥—É –≤–∞–º –º–æ–¥–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–∞—à–∏ —á–∞—Ç—ã –∏ –≥—Ä—É–ø–ø—ã.\n\n"
                "**–û—Å–Ω–æ–≤–Ω—ã–µ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:**\n"
                "‚Ä¢ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–æ–¥–µ—Ä–∞—Ü–∏—è –∫–æ–Ω—Ç–µ–Ω—Ç–∞\n"
                "‚Ä¢ –ó–∞—â–∏—Ç–∞ –æ—Ç —Å–ø–∞–º–∞ –∏ —Ñ–ª—É–¥–∞\n"
                "‚Ä¢ –°–∏—Å—Ç–µ–º–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π –∏ –±–∞–Ω–æ–≤\n"
                "‚Ä¢ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–µ —Ñ–∏–ª—å—Ç—Ä—ã\n"
                "‚Ä¢ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n\n"
                "**–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:**\n"
                "1. –î–æ–±–∞–≤—å—Ç–µ –º–µ–Ω—è –≤ –≤–∞—à —á–∞—Ç\n"
                "2. –°–¥–µ–ª–∞–π—Ç–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º\n"
                "3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
                "**–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n"
                "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞\n"
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/filters - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n"
                "/moderate - –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                parse_mode="Markdown"
            )
        else:
            # –í –≥—Ä—É–ø–ø–æ–≤–æ–º —á–∞—Ç–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
            await message.answer(
                "ü§ñ –ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∫–æ–º–∞–Ω–¥."
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ –±–∞–∑—É
            admins = await get_chat_admins(chat_id)
            db.add_chat(
                chat_id=chat_id,
                chat_title=message.chat.title or "–ì—Ä—É–ø–ø–∞",
                chat_type=message.chat.type,
                admin_ids=admins
            )
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ start: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞.")

@dp.message(Command("help"))
async def cmd_help(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        is_admin = await check_admin_rights(chat_id, user_id)
        
        if is_admin:
            help_text = (
                "üîß **–ö–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞:**\n\n"
                "**–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n"
                "/settings - –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n"
                "/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞\n"
                "/filters - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞–º–∏\n"
                "/moderate - –ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏\n\n"
                "**–ú–æ–¥–µ—Ä–∞—Ü–∏—è:**\n"
                "/warn @username - –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ\n"
                "/mute @username [–≤—Ä–µ–º—è] - –ú—É—Ç\n"
                "/ban @username [–≤—Ä–µ–º—è] - –ë–∞–Ω\n"
                "/unban @username - –†–∞–∑–±–∞–Ω\n"
                "/unmute @username - –†–∞–∑–º—É—Ç\n\n"
                "**–§–∏–ª—å—Ç—Ä—ã:**\n"
                "/addfilter - –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä\n"
                "/delfilter - –£–¥–∞–ª–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä\n"
                "/listfilters - –°–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤\n\n"
                "**–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:**\n"
                "/userstats @username - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è\n"
                "/chatstats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞\n"
                "/modstats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏"
            )
        else:
            help_text = (
                "üìö **–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:**\n\n"
                "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n"
                "/rules - –ü—Ä–∞–≤–∏–ª–∞ —á–∞—Ç–∞\n"
                "/report @username - –ü–æ–∂–∞–ª–æ–≤–∞—Ç—å—Å—è –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
            )
        
        await message.answer(help_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ help: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Å–ø—Ä–∞–≤–∫–∏.")

@dp.message(Command("settings"))
async def cmd_settings(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await check_admin_rights(chat_id, user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        chat = db.get_chat(chat_id)
        if not chat:
            await message.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö.")
            return
        
        settings = chat.get('settings', {})
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=f"üõ°Ô∏è –ê–≤—Ç–æ–º–æ–¥–µ—Ä–∞—Ü–∏—è: {'‚úÖ' if settings.get('auto_moderation', True) else '‚ùå'}",
                    callback_data=f"setting_auto_moderation"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üö´ –ê–Ω—Ç–∏—Å–ø–∞–º: {'‚úÖ' if settings.get('anti_spam', True) else '‚ùå'}",
                    callback_data=f"setting_anti_spam"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üåä –ê–Ω—Ç–∏—Ñ–ª—É–¥: {'‚úÖ' if settings.get('anti_flood', True) else '‚ùå'}",
                    callback_data=f"setting_anti_flood"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üî§ –§–∏–ª—å—Ç—Ä –∫–∞–ø—Å–∞: {'‚úÖ' if settings.get('caps_filter', True) else '‚ùå'}",
                    callback_data=f"setting_caps_filter"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üòÄ –§–∏–ª—å—Ç—Ä —ç–º–æ–¥–∑–∏: {'‚úÖ' if settings.get('emoji_filter', True) else '‚ùå'}",
                    callback_data=f"setting_emoji_filter"
                )
            ],
            [
                InlineKeyboardButton(
                    text=f"üîó –§–∏–ª—å—Ç—Ä —Å—Å—ã–ª–æ–∫: {'‚úÖ' if settings.get('links_filter', True) else '‚ùå'}",
                    callback_data=f"setting_links_filter"
                )
            ],
            [
                InlineKeyboardButton(
                    text="‚öôÔ∏è –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏",
                    callback_data="settings_advanced"
                )
            ]
        ])
        
        await message.answer(
            "‚öôÔ∏è **–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ settings: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫.")

@dp.message(Command("stats"))
async def cmd_stats(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stats"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await check_admin_rights(chat_id, user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        stats = await get_chat_statistics(chat_id)
        
        stats_text = (
            "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —á–∞—Ç–∞**\n\n"
            f"**–û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:**\n"
            f"‚Ä¢ –í—Å–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['total_messages']:,}\n"
            f"‚Ä¢ –£—á–∞—Å—Ç–Ω–∏–∫–æ–≤: {stats['total_users']:,}\n"
            f"‚Ä¢ –ù–æ–≤—ã—Ö —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤ —Å–µ–≥–æ–¥–Ω—è: {stats['new_users_today']:,}\n\n"
            f"**–ú–æ–¥–µ—Ä–∞—Ü–∏—è:**\n"
            f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {stats['total_warnings']:,}\n"
            f"‚Ä¢ –ú—É—Ç–æ–≤: {stats['total_mutes']:,}\n"
            f"‚Ä¢ –ë–∞–Ω–æ–≤: {stats['total_bans']:,}\n"
            f"‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['deleted_messages']:,}\n\n"
            f"**–ê–∫—Ç–∏–≤–Ω–æ—Å—Ç—å:**\n"
            f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π —Å–µ–≥–æ–¥–Ω—è: {stats['messages_today']:,}\n"
            f"‚Ä¢ –ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['active_users']:,}\n"
            f"‚Ä¢ –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏: {stats['last_activity']}"
        )
        
        await message.answer(stats_text, parse_mode="Markdown")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ stats: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.")

@dp.message(Command("filters"))
async def cmd_filters(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /filters"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await check_admin_rights(chat_id, user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞–º–∏.")
            return
        
        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —Ñ–∏–ª—å—Ç—Ä–æ–≤
        filters = await filter_manager.get_filters(chat_id)
        
        if not filters:
            await message.answer(
                "üîç **–§–∏–ª—å—Ç—Ä—ã**\n\n"
                "–í —ç—Ç–æ–º —á–∞—Ç–µ –ø–æ–∫–∞ –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —Ñ–∏–ª—å—Ç—Ä–æ–≤.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /addfilter –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞."
            )
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å —Ñ–∏–ª—å—Ç—Ä–∞–º–∏
        keyboard_buttons = []
        for filter_item in filters[:10]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10
            status = "‚úÖ" if filter_item['is_active'] else "‚ùå"
            keyboard_buttons.append([
                InlineKeyboardButton(
                    text=f"{status} {filter_item['filter_type']}: {filter_item['pattern'][:20]}...",
                    callback_data=f"filter_{filter_item['id']}"
                )
            ])
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        keyboard_buttons.extend([
            [
                InlineKeyboardButton(
                    text="‚ûï –î–æ–±–∞–≤–∏—Ç—å —Ñ–∏–ª—å—Ç—Ä",
                    callback_data="filter_add"
                ),
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                    callback_data="filter_stats"
                )
            ]
        ])
        
        keyboard = InlineKeyboardMarkup(inline_keyboard=keyboard_buttons)
        
        await message.answer(
            f"üîç **–§–∏–ª—å—Ç—Ä—ã**\n\n"
            f"–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {len(filters)}\n"
            f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {len([f for f in filters if f['is_active']])}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ filters: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∫–∞–∑–µ —Ñ–∏–ª—å—Ç—Ä–æ–≤.")

@dp.message(Command("moderate"))
async def cmd_moderate(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /moderate"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await check_admin_rights(chat_id, user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
            return
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –º–æ–¥–µ—Ä–∞—Ü–∏–∏
        keyboard = InlineKeyboardMarkup(inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ",
                    callback_data="mod_action_warn"
                ),
                InlineKeyboardButton(
                    text="üîá –ú—É—Ç",
                    callback_data="mod_action_mute"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üö´ –ë–∞–Ω",
                    callback_data="mod_action_ban"
                ),
                InlineKeyboardButton(
                    text="‚úÖ –†–∞–∑–±–∞–Ω/–†–∞–∑–º—É—Ç",
                    callback_data="mod_action_unban"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏",
                    callback_data="mod_stats"
                )
            ],
            [
                InlineKeyboardButton(
                    text="üßπ –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞",
                    callback_data="mod_cleanup"
                )
            ]
        ])
        
        await message.answer(
            "üõ°Ô∏è **–ü–∞–Ω–µ–ª—å –º–æ–¥–µ—Ä–∞—Ü–∏–∏**\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=keyboard,
            parse_mode="Markdown"
        )
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ moderate: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –ø–∞–Ω–µ–ª–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@dp.message(Command("warn"))
async def cmd_warn(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /warn"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await check_admin_rights(chat_id, user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π.")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        args = message.text.split()
        if len(args) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /warn @username [–ø—Ä–∏—á–∏–Ω–∞]"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º username –∏ –ø—Ä–∏—á–∏–Ω—É
        target_username = args[1].lstrip('@')
        reason = ' '.join(args[2:]) if len(args) > 2 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user = await find_user_by_username(chat_id, target_username)
        if not target_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ
        success = await moderator.apply_moderation_action(
            chat_id=chat_id,
            user_id=target_user['user_id'],
            action_type='warning',
            reason=reason,
            moderator_id=user_id
        )
        
        if success:
            await message.answer(
                f"‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_mention(target_user)} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ warn: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è.")

@dp.message(Command("mute"))
async def cmd_mute(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /mute"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await check_admin_rights(chat_id, user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –º—É—Ç–æ–≤.")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        args = message.text.split()
        if len(args) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /mute @username [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞]"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º username, –≤—Ä–µ–º—è –∏ –ø—Ä–∏—á–∏–Ω—É
        target_username = args[1].lstrip('@')
        duration_str = args[2] if len(args) > 2 and not args[2].startswith('@') else "1—á"
        reason = ' '.join(args[3:]) if len(args) > 3 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"
        
        # –ü–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = parse_duration(duration_str)
        if duration == 0:
            duration = 3600  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 —á–∞—Å
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user = await find_user_by_username(chat_id, target_username)
        if not target_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –º—É—Ç
        success = await moderator.apply_moderation_action(
            chat_id=chat_id,
            user_id=target_user['user_id'],
            action_type='mute_1',
            reason=reason,
            moderator_id=user_id,
            duration=duration
        )
        
        if success:
            duration_text = format_duration(duration)
            await message.answer(
                f"üîá –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_mention(target_user)} –ø–æ–ª—É—á–∏–ª –º—É—Ç –Ω–∞ {duration_text}.\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º—É—Ç–∞.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ mute: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –º—É—Ç–∞.")

@dp.message(Command("ban"))
async def cmd_ban(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /ban"""
    try:
        user_id = message.from_user.id
        chat_id = message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        if not await check_admin_rights(chat_id, user_id):
            await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –≤—ã–¥–∞—á–∏ –±–∞–Ω–æ–≤.")
            return
        
        # –ü–∞—Ä—Å–∏–º –∫–æ–º–∞–Ω–¥—É
        args = message.text.split()
        if len(args) < 2:
            await message.answer(
                "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –∫–æ–º–∞–Ω–¥—ã.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: /ban @username [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞]"
            )
            return
        
        # –ü–æ–ª—É—á–∞–µ–º username, –≤—Ä–µ–º—è –∏ –ø—Ä–∏—á–∏–Ω—É
        target_username = args[1].lstrip('@')
        duration_str = args[2] if len(args) > 2 and not args[2].startswith('@') else "1–¥"
        reason = ' '.join(args[3:]) if len(args) > 3 else "–ù–∞—Ä—É—à–µ–Ω–∏–µ –ø—Ä–∞–≤–∏–ª —á–∞—Ç–∞"
        
        # –ü–∞—Ä—Å–∏–º –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        duration = parse_duration(duration_str)
        if duration == 0:
            duration = 86400  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é 1 –¥–µ–Ω—å
        
        # –ù–∞—Ö–æ–¥–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        target_user = await find_user_by_username(chat_id, target_username)
        if not target_user:
            await message.answer("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.")
            return
        
        # –ü—Ä–∏–º–µ–Ω—è–µ–º –±–∞–Ω
        success = await moderator.apply_moderation_action(
            chat_id=chat_id,
            user_id=target_user['user_id'],
            action_type='ban_1',
            reason=reason,
            moderator_id=user_id,
            duration=duration
        )
        
        if success:
            duration_text = format_duration(duration)
            await message.answer(
                f"üö´ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {get_user_mention(target_user)} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω –Ω–∞ {duration_text}.\n\n"
                f"–ü—Ä–∏—á–∏–Ω–∞: {reason}"
            )
        else:
            await message.answer("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–∞–Ω–∞.")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ –∫–æ–º–∞–Ω–¥–µ ban: {e}")
        await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–¥–∞—á–µ –±–∞–Ω–∞.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏
@dp.message()
async def handle_message(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –±–æ—Ç–æ–≤
        if message.from_user.is_bot:
            return
        
        chat_id = message.chat.id
        user_id = message.from_user.id
        
        # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É
        user = message.from_user
        db.add_user(
            user_id=user.id,
            username=user.username,
            first_name=user.first_name,
            last_name=user.last_name
        )
        
        # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        db.add_message(
            chat_id=chat_id,
            user_id=user_id,
            message_id=message.message_id,
            message_type=message.content_type,
            content=message.text or message.caption or ""
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–∞ –Ω–∞—Ä—É—à–µ–Ω–∏—è
        check_result = await moderator.check_message(message)
        
        if check_result['action_needed']:
            # –ü—Ä–∏–º–µ–Ω—è–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏
            await moderator.apply_moderation_action(
                chat_id=chat_id,
                user_id=user_id,
                action_type=check_result['action_type'],
                reason='; '.join(check_result['violations']),
                moderator_id=0,  # –°–∏—Å—Ç–µ–º–∞
                duration=check_result['duration']
            )
            
            # –£–¥–∞–ª—è–µ–º –Ω–∞—Ä—É—à–∞—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            try:
                await message.delete()
            except TelegramAPIError:
                logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message.message_id}")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
async def check_admin_rights(chat_id: int, user_id: int) -> bool:
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        chat = db.get_chat(chat_id)
        if chat and user_id in chat.get('admin_ids', []):
            return True
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á–µ—Ä–µ–∑ Telegram API
        member = await bot.get_chat_member(chat_id, user_id)
        return member.status in ['creator', 'administrator']
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞: {e}")
        return False

async def get_chat_admins(chat_id: int) -> List[int]:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤ —á–∞—Ç–∞"""
    try:
        admins = await bot.get_chat_administrators(chat_id)
        return [admin.user.id for admin in admins]
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤: {e}")
        return []

async def find_user_by_username(chat_id: int, username: str) -> Optional[Dict]:
    """–ü–æ–∏—Å–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ username"""
    try:
        # –ò—â–µ–º –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        users = db.search_users_by_username(username)
        if users:
            return users[0]
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
        return None
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–∏—Å–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
        return None

async def get_chat_statistics(chat_id: int) -> Dict:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ —á–∞—Ç–∞"""
    try:
        stats = db.get_chat_statistics(chat_id)
        return stats
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
        return {
            'total_messages': 0,
            'total_users': 0,
            'new_users_today': 0,
            'total_warnings': 0,
            'total_mutes': 0,
            'total_bans': 0,
            'deleted_messages': 0,
            'messages_today': 0,
            'active_users': 0,
            'last_activity': '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        }

# –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
async def periodic_tasks():
    """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
    while True:
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ç–µ—á–µ–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–∞–Ω–æ–≤
            expired_bans = await moderator.check_and_expire_bans()
            if expired_bans > 0:
                logger.info(f"–ò—Å—Ç–µ–∫–ª–æ {expired_bans} –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –±–∞–Ω–æ–≤")
            
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            cleaned_data = await moderator.cleanup_old_data()
            if cleaned_data > 0:
                logger.info(f"–û—á–∏—â–µ–Ω–æ {cleaned_data} —Å—Ç–∞—Ä—ã—Ö –∑–∞–ø–∏—Å–µ–π")
            
            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç
            await asyncio.sleep(300)
            
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –≤ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á–∞—Ö: {e}")
            await asyncio.sleep(60)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ callback-–∑–∞–ø—Ä–æ—Å–æ–≤
@dp.callback_query()
async def handle_callback(callback: types.CallbackQuery):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ callback-–∑–∞–ø—Ä–æ—Å–æ–≤"""
    try:
        data = callback.data
        user_id = callback.from_user.id
        chat_id = callback.message.chat.id
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è –±–æ–ª—å—à–∏–Ω—Å—Ç–≤–∞ –¥–µ–π—Å—Ç–≤–∏–π
        if not await check_admin_rights(chat_id, user_id):
            await callback.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è.")
            return
        
        if data.startswith("setting_"):
            await handle_setting_callback(callback, data)
        elif data.startswith("filter_"):
            await handle_filter_callback(callback, data)
        elif data.startswith("mod_action_"):
            await handle_mod_action_callback(callback, data)
        elif data.startswith("mod_"):
            await handle_mod_callback(callback, data)
        else:
            await callback.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def handle_setting_callback(callback: types.CallbackQuery, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
    try:
        setting_name = data.replace("setting_", "")
        chat_id = callback.message.chat.id
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        chat = db.get_chat(chat_id)
        if not chat:
            await callback.answer("‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        settings = chat.get('settings', {})
        current_value = settings.get(setting_name, True)
        
        # –ò–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
        settings[setting_name] = not current_value
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤ –±–∞–∑–µ
        success = db.update_chat_settings(chat_id, settings)
        
        if success:
            status = "‚úÖ" if settings[setting_name] else "‚ùå"
            await callback.answer(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∞: {status}")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            await callback.message.edit_reply_markup(
                reply_markup=callback.message.reply_markup
            )
        else:
            await callback.answer("‚ùå –û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def handle_filter_callback(callback: types.CallbackQuery, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–æ–≤"""
    try:
        if data == "filter_add":
            await callback.message.answer(
                "üîç **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞**\n\n"
                "–û—Ç–ø—Ä–∞–≤—å—Ç–µ –ø–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ (—Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –≤—ã—Ä–∞–∂–µ–Ω–∏–µ):",
                parse_mode="Markdown"
            )
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å FSM –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∏–ª—å—Ç—Ä–∞
        elif data == "filter_stats":
            chat_id = callback.message.chat.id
            stats = await filter_manager.get_filter_stats(chat_id)
            
            stats_text = (
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ñ–∏–ª—å—Ç—Ä–æ–≤**\n\n"
                f"–í—Å–µ–≥–æ —Ñ–∏–ª—å—Ç—Ä–æ–≤: {stats['total_filters']}\n"
                f"–ê–∫—Ç–∏–≤–Ω—ã—Ö: {stats['active_filters']}\n\n"
                "**–ü–æ —Ç–∏–ø–∞–º:**\n"
            )
            
            for filter_type, count in stats['by_type'].items():
                stats_text += f"‚Ä¢ {filter_type}: {count}\n"
            
            stats_text += "\n**–ü–æ –¥–µ–π—Å—Ç–≤–∏—è–º:**\n"
            for action, count in stats['by_action'].items():
                stats_text += f"‚Ä¢ {action}: {count}\n"
            
            await callback.message.answer(stats_text, parse_mode="Markdown")
        else:
            filter_id = int(data.replace("filter_", ""))
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ —Ñ–∏–ª—å—Ç—Ä–∞
            await callback.answer(f"–§–∏–ª—å—Ç—Ä {filter_id}")
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∏–ª—å—Ç—Ä–∞: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def handle_mod_action_callback(callback: types.CallbackQuery, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –¥–µ–π—Å—Ç–≤–∏–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        action = data.replace("mod_action_", "")
        
        if action == "warn":
            await callback.message.answer(
                "‚ö†Ô∏è **–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ**\n\n"
                "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /warn –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/warn @username [–ø—Ä–∏—á–∏–Ω–∞]"
            )
        elif action == "mute":
            await callback.message.answer(
                "üîá **–ú—É—Ç**\n\n"
                "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /mute –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/mute @username [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞]"
            )
        elif action == "ban":
            await callback.message.answer(
                "üö´ **–ë–∞–Ω**\n\n"
                "–û—Ç–≤–µ—Ç—å—Ç–µ –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–æ–º–∞–Ω–¥–æ–π /ban –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:\n"
                "/ban @username [–≤—Ä–µ–º—è] [–ø—Ä–∏—á–∏–Ω–∞]"
            )
        elif action == "unban":
            await callback.message.answer(
                "‚úÖ **–†–∞–∑–±–∞–Ω/–†–∞–∑–º—É—Ç**\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã:\n"
                "/unban @username - —Ä–∞–∑–±–∞–Ω\n"
                "/unmute @username - —Ä–∞–∑–º—É—Ç"
            )
        
        await callback.answer("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–µ–π—Å—Ç–≤–∏—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

async def handle_mod_callback(callback: types.CallbackQuery, data: str):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏"""
    try:
        if data == "mod_stats":
            chat_id = callback.message.chat.id
            stats = await get_chat_statistics(chat_id)
            
            stats_text = (
                "üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏**\n\n"
                f"**–ó–∞ –≤—Å–µ –≤—Ä–µ–º—è:**\n"
                f"‚Ä¢ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π: {stats['total_warnings']:,}\n"
                f"‚Ä¢ –ú—É—Ç–æ–≤: {stats['total_mutes']:,}\n"
                f"‚Ä¢ –ë–∞–Ω–æ–≤: {stats['total_bans']:,}\n"
                f"‚Ä¢ –£–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: {stats['deleted_messages']:,}\n\n"
                f"**–°–µ–≥–æ–¥–Ω—è:**\n"
                f"‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏–π: {stats['messages_today']:,}\n"
                f"‚Ä¢ –ù–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {stats['new_users_today']:,}"
            )
            
            await callback.message.answer(stats_text, parse_mode="Markdown")
            
        elif data == "mod_cleanup":
            await callback.message.answer(
                "üßπ **–û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞**\n\n"
                "–≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—ã –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."
            )
        
        await callback.answer("–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–æ–¥–µ—Ä–∞—Ü–∏–∏: {e}")
        await callback.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞")

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –±–æ—Ç–∞"""
    try:
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(periodic_tasks())
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        await dp.start_polling(bot)
        
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")